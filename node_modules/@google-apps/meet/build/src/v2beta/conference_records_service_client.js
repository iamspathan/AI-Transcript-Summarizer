"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConferenceRecordsServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v2beta/conference_records_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./conference_records_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  REST API for services dealing with conference records.
 * @class
 * @memberof v2beta
 */
class ConferenceRecordsServiceClient {
    /**
     * Construct an instance of ConferenceRecordsServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ConferenceRecordsServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b, _c, _d;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this
            .constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        this._universeDomain =
            (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : 'googleapis.com';
        this._servicePath = 'meet.' + this._universeDomain;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_c = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _c !== void 0 ? _c : {};
        const fallback = (_d = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _d !== void 0 ? _d : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            conferenceRecordPathTemplate: new this._gaxModule.PathTemplate('conferenceRecords/{conference_record}'),
            participantPathTemplate: new this._gaxModule.PathTemplate('conferenceRecords/{conference_record}/participants/{participant}'),
            participantSessionPathTemplate: new this._gaxModule.PathTemplate('conferenceRecords/{conference_record}/participants/{participant}/participantSessions/{participant_session}'),
            recordingPathTemplate: new this._gaxModule.PathTemplate('conferenceRecords/{conference_record}/recordings/{recording}'),
            spacePathTemplate: new this._gaxModule.PathTemplate('spaces/{space}'),
            transcriptPathTemplate: new this._gaxModule.PathTemplate('conferenceRecords/{conference_record}/transcripts/{transcript}'),
            transcriptEntryPathTemplate: new this._gaxModule.PathTemplate('conferenceRecords/{conference_record}/transcripts/{transcript}/entries/{entry}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listConferenceRecords: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'conferenceRecords'),
            listParticipants: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'participants'),
            listParticipantSessions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'participantSessions'),
            listRecordings: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'recordings'),
            listTranscripts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'transcripts'),
            listTranscriptEntries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'transcriptEntries'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.apps.meet.v2beta.ConferenceRecordsService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.conferenceRecordsServiceStub) {
            return this.conferenceRecordsServiceStub;
        }
        // Put together the "service stub" for
        // google.apps.meet.v2beta.ConferenceRecordsService.
        this.conferenceRecordsServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.apps.meet.v2beta.ConferenceRecordsService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.apps.meet.v2beta
                    .ConferenceRecordsService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const conferenceRecordsServiceStubMethods = [
            'getConferenceRecord',
            'listConferenceRecords',
            'getParticipant',
            'listParticipants',
            'getParticipantSession',
            'listParticipantSessions',
            'getRecording',
            'listRecordings',
            'getTranscript',
            'listTranscripts',
            'getTranscriptEntry',
            'listTranscriptEntries',
        ];
        for (const methodName of conferenceRecordsServiceStubMethods) {
            const callPromise = this.conferenceRecordsServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.conferenceRecordsServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process !== undefined &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'meet.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process !== undefined &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'meet.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getConferenceRecord(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getConferenceRecord(request, options, callback);
    }
    getParticipant(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getParticipant(request, options, callback);
    }
    getParticipantSession(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getParticipantSession(request, options, callback);
    }
    getRecording(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getRecording(request, options, callback);
    }
    getTranscript(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getTranscript(request, options, callback);
    }
    getTranscriptEntry(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getTranscriptEntry(request, options, callback);
    }
    listConferenceRecords(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.listConferenceRecords(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of conference records to return. The service might
     *   return fewer than this value. If unspecified, at most 25 conference records
     *   are returned. The maximum value is 100; values above 100 are coerced to
     *   100. Maximum might change in the future.
     * @param {string} [request.pageToken]
     *   Optional. Page token returned from previous List Call.
     * @param {string} [request.filter]
     *   Optional. User specified filtering condition in EBNF format. The following
     *   are the filterable fields:
     *
     *   * `space.meeting_code`
     *   * `space.name`
     *   * `start_time`
     *   * `end_time`
     *
     *   For example, `space.meeting_code = "abc-mnop-xyz"`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.apps.meet.v2beta.ConferenceRecord|ConferenceRecord} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConferenceRecordsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConferenceRecordsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listConferenceRecords'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listConferenceRecords.createStream(this.innerApiCalls.listConferenceRecords, request, callSettings);
    }
    /**
     * Equivalent to `listConferenceRecords`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of conference records to return. The service might
     *   return fewer than this value. If unspecified, at most 25 conference records
     *   are returned. The maximum value is 100; values above 100 are coerced to
     *   100. Maximum might change in the future.
     * @param {string} [request.pageToken]
     *   Optional. Page token returned from previous List Call.
     * @param {string} [request.filter]
     *   Optional. User specified filtering condition in EBNF format. The following
     *   are the filterable fields:
     *
     *   * `space.meeting_code`
     *   * `space.name`
     *   * `start_time`
     *   * `end_time`
     *
     *   For example, `space.meeting_code = "abc-mnop-xyz"`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.apps.meet.v2beta.ConferenceRecord|ConferenceRecord}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/conference_records_service.list_conference_records.js</caption>
     * region_tag:meet_v2beta_generated_ConferenceRecordsService_ListConferenceRecords_async
     */
    listConferenceRecordsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const defaultCallSettings = this._defaults['listConferenceRecords'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listConferenceRecords.asyncIterate(this.innerApiCalls['listConferenceRecords'], request, callSettings);
    }
    listParticipants(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listParticipants(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `conferenceRecords/{conference_record}`
     * @param {number} request.pageSize
     *   Maximum number of participants to return. The service might return fewer
     *   than this value.
     *   If unspecified, at most 100 participants are returned.
     *   The maximum value is 250; values above 250 are coerced to 250.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {string} [request.filter]
     *   Optional. User specified filtering condition in EBNF format. The following
     *   are the filterable fields:
     *
     *   * `earliest_start_time`
     *   * `latest_end_time`
     *
     *   For example, `latest_end_time IS NULL` returns active participants in
     *   the conference.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.apps.meet.v2beta.Participant|Participant} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listParticipantsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listParticipantsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listParticipants'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listParticipants.createStream(this.innerApiCalls.listParticipants, request, callSettings);
    }
    /**
     * Equivalent to `listParticipants`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `conferenceRecords/{conference_record}`
     * @param {number} request.pageSize
     *   Maximum number of participants to return. The service might return fewer
     *   than this value.
     *   If unspecified, at most 100 participants are returned.
     *   The maximum value is 250; values above 250 are coerced to 250.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {string} [request.filter]
     *   Optional. User specified filtering condition in EBNF format. The following
     *   are the filterable fields:
     *
     *   * `earliest_start_time`
     *   * `latest_end_time`
     *
     *   For example, `latest_end_time IS NULL` returns active participants in
     *   the conference.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.apps.meet.v2beta.Participant|Participant}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/conference_records_service.list_participants.js</caption>
     * region_tag:meet_v2beta_generated_ConferenceRecordsService_ListParticipants_async
     */
    listParticipantsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listParticipants'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listParticipants.asyncIterate(this.innerApiCalls['listParticipants'], request, callSettings);
    }
    listParticipantSessions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listParticipantSessions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `conferenceRecords/{conference_record}/participants/{participant}`
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of participant sessions to return. The service
     *   might return fewer than this value. If unspecified, at most 100
     *   participants are returned. The maximum value is 250; values above 250 are
     *   coerced to 250. Maximum might change in the future.
     * @param {string} [request.pageToken]
     *   Optional. Page token returned from previous List Call.
     * @param {string} [request.filter]
     *   Optional. User specified filtering condition in EBNF format. The following
     *   are the filterable fields:
     *
     *   * `start_time`
     *   * `end_time`
     *
     *   For example, `end_time IS NULL` returns active participant sessions in
     *   the conference record.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.apps.meet.v2beta.ParticipantSession|ParticipantSession} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listParticipantSessionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listParticipantSessionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listParticipantSessions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listParticipantSessions.createStream(this.innerApiCalls.listParticipantSessions, request, callSettings);
    }
    /**
     * Equivalent to `listParticipantSessions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `conferenceRecords/{conference_record}/participants/{participant}`
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of participant sessions to return. The service
     *   might return fewer than this value. If unspecified, at most 100
     *   participants are returned. The maximum value is 250; values above 250 are
     *   coerced to 250. Maximum might change in the future.
     * @param {string} [request.pageToken]
     *   Optional. Page token returned from previous List Call.
     * @param {string} [request.filter]
     *   Optional. User specified filtering condition in EBNF format. The following
     *   are the filterable fields:
     *
     *   * `start_time`
     *   * `end_time`
     *
     *   For example, `end_time IS NULL` returns active participant sessions in
     *   the conference record.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.apps.meet.v2beta.ParticipantSession|ParticipantSession}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/conference_records_service.list_participant_sessions.js</caption>
     * region_tag:meet_v2beta_generated_ConferenceRecordsService_ListParticipantSessions_async
     */
    listParticipantSessionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listParticipantSessions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listParticipantSessions.asyncIterate(this.innerApiCalls['listParticipantSessions'], request, callSettings);
    }
    listRecordings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listRecordings(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `conferenceRecords/{conference_record}`
     * @param {number} request.pageSize
     *   Maximum number of recordings to return. The service might return fewer
     *   than this value.
     *   If unspecified, at most 10 recordings are returned.
     *   The maximum value is 100; values above 100 are coerced to 100.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.apps.meet.v2beta.Recording|Recording} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRecordingsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRecordingsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRecordings'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRecordings.createStream(this.innerApiCalls.listRecordings, request, callSettings);
    }
    /**
     * Equivalent to `listRecordings`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `conferenceRecords/{conference_record}`
     * @param {number} request.pageSize
     *   Maximum number of recordings to return. The service might return fewer
     *   than this value.
     *   If unspecified, at most 10 recordings are returned.
     *   The maximum value is 100; values above 100 are coerced to 100.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.apps.meet.v2beta.Recording|Recording}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/conference_records_service.list_recordings.js</caption>
     * region_tag:meet_v2beta_generated_ConferenceRecordsService_ListRecordings_async
     */
    listRecordingsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRecordings'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRecordings.asyncIterate(this.innerApiCalls['listRecordings'], request, callSettings);
    }
    listTranscripts(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listTranscripts(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `conferenceRecords/{conference_record}`
     * @param {number} request.pageSize
     *   Maximum number of transcripts to return. The service might return fewer
     *   than this value.
     *   If unspecified, at most 10 transcripts are returned.
     *   The maximum value is 100; values above 100 are coerced to 100.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.apps.meet.v2beta.Transcript|Transcript} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTranscriptsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTranscriptsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTranscripts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTranscripts.createStream(this.innerApiCalls.listTranscripts, request, callSettings);
    }
    /**
     * Equivalent to `listTranscripts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `conferenceRecords/{conference_record}`
     * @param {number} request.pageSize
     *   Maximum number of transcripts to return. The service might return fewer
     *   than this value.
     *   If unspecified, at most 10 transcripts are returned.
     *   The maximum value is 100; values above 100 are coerced to 100.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.apps.meet.v2beta.Transcript|Transcript}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/conference_records_service.list_transcripts.js</caption>
     * region_tag:meet_v2beta_generated_ConferenceRecordsService_ListTranscripts_async
     */
    listTranscriptsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTranscripts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTranscripts.asyncIterate(this.innerApiCalls['listTranscripts'], request, callSettings);
    }
    listTranscriptEntries(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listTranscriptEntries(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `conferenceRecords/{conference_record}/transcripts/{transcript}`
     * @param {number} request.pageSize
     *   Maximum number of entries to return. The service might return fewer than
     *   this value.
     *   If unspecified, at most 10 entries are returned.
     *   The maximum value is 100; values above 100 are coerced to 100.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.apps.meet.v2beta.TranscriptEntry|TranscriptEntry} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTranscriptEntriesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTranscriptEntriesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTranscriptEntries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTranscriptEntries.createStream(this.innerApiCalls.listTranscriptEntries, request, callSettings);
    }
    /**
     * Equivalent to `listTranscriptEntries`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `conferenceRecords/{conference_record}/transcripts/{transcript}`
     * @param {number} request.pageSize
     *   Maximum number of entries to return. The service might return fewer than
     *   this value.
     *   If unspecified, at most 10 entries are returned.
     *   The maximum value is 100; values above 100 are coerced to 100.
     *   Maximum might change in the future.
     * @param {string} request.pageToken
     *   Page token returned from previous List Call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.apps.meet.v2beta.TranscriptEntry|TranscriptEntry}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/conference_records_service.list_transcript_entries.js</caption>
     * region_tag:meet_v2beta_generated_ConferenceRecordsService_ListTranscriptEntries_async
     */
    listTranscriptEntriesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTranscriptEntries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTranscriptEntries.asyncIterate(this.innerApiCalls['listTranscriptEntries'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified conferenceRecord resource name string.
     *
     * @param {string} conference_record
     * @returns {string} Resource name string.
     */
    conferenceRecordPath(conferenceRecord) {
        return this.pathTemplates.conferenceRecordPathTemplate.render({
            conference_record: conferenceRecord,
        });
    }
    /**
     * Parse the conference_record from ConferenceRecord resource.
     *
     * @param {string} conferenceRecordName
     *   A fully-qualified path representing ConferenceRecord resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromConferenceRecordName(conferenceRecordName) {
        return this.pathTemplates.conferenceRecordPathTemplate.match(conferenceRecordName).conference_record;
    }
    /**
     * Return a fully-qualified participant resource name string.
     *
     * @param {string} conference_record
     * @param {string} participant
     * @returns {string} Resource name string.
     */
    participantPath(conferenceRecord, participant) {
        return this.pathTemplates.participantPathTemplate.render({
            conference_record: conferenceRecord,
            participant: participant,
        });
    }
    /**
     * Parse the conference_record from Participant resource.
     *
     * @param {string} participantName
     *   A fully-qualified path representing Participant resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromParticipantName(participantName) {
        return this.pathTemplates.participantPathTemplate.match(participantName)
            .conference_record;
    }
    /**
     * Parse the participant from Participant resource.
     *
     * @param {string} participantName
     *   A fully-qualified path representing Participant resource.
     * @returns {string} A string representing the participant.
     */
    matchParticipantFromParticipantName(participantName) {
        return this.pathTemplates.participantPathTemplate.match(participantName)
            .participant;
    }
    /**
     * Return a fully-qualified participantSession resource name string.
     *
     * @param {string} conference_record
     * @param {string} participant
     * @param {string} participant_session
     * @returns {string} Resource name string.
     */
    participantSessionPath(conferenceRecord, participant, participantSession) {
        return this.pathTemplates.participantSessionPathTemplate.render({
            conference_record: conferenceRecord,
            participant: participant,
            participant_session: participantSession,
        });
    }
    /**
     * Parse the conference_record from ParticipantSession resource.
     *
     * @param {string} participantSessionName
     *   A fully-qualified path representing ParticipantSession resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromParticipantSessionName(participantSessionName) {
        return this.pathTemplates.participantSessionPathTemplate.match(participantSessionName).conference_record;
    }
    /**
     * Parse the participant from ParticipantSession resource.
     *
     * @param {string} participantSessionName
     *   A fully-qualified path representing ParticipantSession resource.
     * @returns {string} A string representing the participant.
     */
    matchParticipantFromParticipantSessionName(participantSessionName) {
        return this.pathTemplates.participantSessionPathTemplate.match(participantSessionName).participant;
    }
    /**
     * Parse the participant_session from ParticipantSession resource.
     *
     * @param {string} participantSessionName
     *   A fully-qualified path representing ParticipantSession resource.
     * @returns {string} A string representing the participant_session.
     */
    matchParticipantSessionFromParticipantSessionName(participantSessionName) {
        return this.pathTemplates.participantSessionPathTemplate.match(participantSessionName).participant_session;
    }
    /**
     * Return a fully-qualified recording resource name string.
     *
     * @param {string} conference_record
     * @param {string} recording
     * @returns {string} Resource name string.
     */
    recordingPath(conferenceRecord, recording) {
        return this.pathTemplates.recordingPathTemplate.render({
            conference_record: conferenceRecord,
            recording: recording,
        });
    }
    /**
     * Parse the conference_record from Recording resource.
     *
     * @param {string} recordingName
     *   A fully-qualified path representing Recording resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromRecordingName(recordingName) {
        return this.pathTemplates.recordingPathTemplate.match(recordingName)
            .conference_record;
    }
    /**
     * Parse the recording from Recording resource.
     *
     * @param {string} recordingName
     *   A fully-qualified path representing Recording resource.
     * @returns {string} A string representing the recording.
     */
    matchRecordingFromRecordingName(recordingName) {
        return this.pathTemplates.recordingPathTemplate.match(recordingName)
            .recording;
    }
    /**
     * Return a fully-qualified space resource name string.
     *
     * @param {string} space
     * @returns {string} Resource name string.
     */
    spacePath(space) {
        return this.pathTemplates.spacePathTemplate.render({
            space: space,
        });
    }
    /**
     * Parse the space from Space resource.
     *
     * @param {string} spaceName
     *   A fully-qualified path representing Space resource.
     * @returns {string} A string representing the space.
     */
    matchSpaceFromSpaceName(spaceName) {
        return this.pathTemplates.spacePathTemplate.match(spaceName).space;
    }
    /**
     * Return a fully-qualified transcript resource name string.
     *
     * @param {string} conference_record
     * @param {string} transcript
     * @returns {string} Resource name string.
     */
    transcriptPath(conferenceRecord, transcript) {
        return this.pathTemplates.transcriptPathTemplate.render({
            conference_record: conferenceRecord,
            transcript: transcript,
        });
    }
    /**
     * Parse the conference_record from Transcript resource.
     *
     * @param {string} transcriptName
     *   A fully-qualified path representing Transcript resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromTranscriptName(transcriptName) {
        return this.pathTemplates.transcriptPathTemplate.match(transcriptName)
            .conference_record;
    }
    /**
     * Parse the transcript from Transcript resource.
     *
     * @param {string} transcriptName
     *   A fully-qualified path representing Transcript resource.
     * @returns {string} A string representing the transcript.
     */
    matchTranscriptFromTranscriptName(transcriptName) {
        return this.pathTemplates.transcriptPathTemplate.match(transcriptName)
            .transcript;
    }
    /**
     * Return a fully-qualified transcriptEntry resource name string.
     *
     * @param {string} conference_record
     * @param {string} transcript
     * @param {string} entry
     * @returns {string} Resource name string.
     */
    transcriptEntryPath(conferenceRecord, transcript, entry) {
        return this.pathTemplates.transcriptEntryPathTemplate.render({
            conference_record: conferenceRecord,
            transcript: transcript,
            entry: entry,
        });
    }
    /**
     * Parse the conference_record from TranscriptEntry resource.
     *
     * @param {string} transcriptEntryName
     *   A fully-qualified path representing TranscriptEntry resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromTranscriptEntryName(transcriptEntryName) {
        return this.pathTemplates.transcriptEntryPathTemplate.match(transcriptEntryName).conference_record;
    }
    /**
     * Parse the transcript from TranscriptEntry resource.
     *
     * @param {string} transcriptEntryName
     *   A fully-qualified path representing TranscriptEntry resource.
     * @returns {string} A string representing the transcript.
     */
    matchTranscriptFromTranscriptEntryName(transcriptEntryName) {
        return this.pathTemplates.transcriptEntryPathTemplate.match(transcriptEntryName).transcript;
    }
    /**
     * Parse the entry from TranscriptEntry resource.
     *
     * @param {string} transcriptEntryName
     *   A fully-qualified path representing TranscriptEntry resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromTranscriptEntryName(transcriptEntryName) {
        return this.pathTemplates.transcriptEntryPathTemplate.match(transcriptEntryName).entry;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.conferenceRecordsServiceStub && !this._terminated) {
            return this.conferenceRecordsServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.ConferenceRecordsServiceClient = ConferenceRecordsServiceClient;
//# sourceMappingURL=conference_records_service_client.js.map