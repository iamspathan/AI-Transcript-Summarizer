import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  REST API for services dealing with spaces.
 * @class
 * @memberof v2beta
 */
export declare class SpacesServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    spacesServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of SpacesServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new SpacesServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): never[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * [Developer Preview](https://developers.google.com/workspace/preview).
     * Creates a space.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.apps.meet.v2beta.Space} request.space
     *   Space to be created. As of May 2023, the input space can be empty. Later on
     *   the input space can be non-empty when space configuration is introduced.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Space|Space}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/spaces_service.create_space.js</caption>
     * region_tag:meet_v2beta_generated_SpacesService_CreateSpace_async
     */
    createSpace(request?: protos.google.apps.meet.v2beta.ICreateSpaceRequest, options?: CallOptions): Promise<[
        protos.google.apps.meet.v2beta.ISpace,
        protos.google.apps.meet.v2beta.ICreateSpaceRequest | undefined,
        {} | undefined
    ]>;
    createSpace(request: protos.google.apps.meet.v2beta.ICreateSpaceRequest, options: CallOptions, callback: Callback<protos.google.apps.meet.v2beta.ISpace, protos.google.apps.meet.v2beta.ICreateSpaceRequest | null | undefined, {} | null | undefined>): void;
    createSpace(request: protos.google.apps.meet.v2beta.ICreateSpaceRequest, callback: Callback<protos.google.apps.meet.v2beta.ISpace, protos.google.apps.meet.v2beta.ICreateSpaceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * [Developer Preview](https://developers.google.com/workspace/preview).
     * Gets a space by `space_id` or `meeting_code`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the space.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Space|Space}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/spaces_service.get_space.js</caption>
     * region_tag:meet_v2beta_generated_SpacesService_GetSpace_async
     */
    getSpace(request?: protos.google.apps.meet.v2beta.IGetSpaceRequest, options?: CallOptions): Promise<[
        protos.google.apps.meet.v2beta.ISpace,
        protos.google.apps.meet.v2beta.IGetSpaceRequest | undefined,
        {} | undefined
    ]>;
    getSpace(request: protos.google.apps.meet.v2beta.IGetSpaceRequest, options: CallOptions, callback: Callback<protos.google.apps.meet.v2beta.ISpace, protos.google.apps.meet.v2beta.IGetSpaceRequest | null | undefined, {} | null | undefined>): void;
    getSpace(request: protos.google.apps.meet.v2beta.IGetSpaceRequest, callback: Callback<protos.google.apps.meet.v2beta.ISpace, protos.google.apps.meet.v2beta.IGetSpaceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * [Developer Preview](https://developers.google.com/workspace/preview).
     * Updates a space.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.apps.meet.v2beta.Space} request.space
     *   Required. Space to be updated.
     * @param {google.protobuf.FieldMask} [request.updateMask]
     *   Optional. Field mask used to specify the fields to be updated in the space.
     *   If update_mask isn't provided, it defaults to '*' and updates all
     *   fields provided in the request, including deleting fields not set in the
     *   request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.apps.meet.v2beta.Space|Space}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/spaces_service.update_space.js</caption>
     * region_tag:meet_v2beta_generated_SpacesService_UpdateSpace_async
     */
    updateSpace(request?: protos.google.apps.meet.v2beta.IUpdateSpaceRequest, options?: CallOptions): Promise<[
        protos.google.apps.meet.v2beta.ISpace,
        protos.google.apps.meet.v2beta.IUpdateSpaceRequest | undefined,
        {} | undefined
    ]>;
    updateSpace(request: protos.google.apps.meet.v2beta.IUpdateSpaceRequest, options: CallOptions, callback: Callback<protos.google.apps.meet.v2beta.ISpace, protos.google.apps.meet.v2beta.IUpdateSpaceRequest | null | undefined, {} | null | undefined>): void;
    updateSpace(request: protos.google.apps.meet.v2beta.IUpdateSpaceRequest, callback: Callback<protos.google.apps.meet.v2beta.ISpace, protos.google.apps.meet.v2beta.IUpdateSpaceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * [Developer Preview](https://developers.google.com/workspace/preview).
     * Ends an active conference (if there is one).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the space.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/spaces_service.end_active_conference.js</caption>
     * region_tag:meet_v2beta_generated_SpacesService_EndActiveConference_async
     */
    endActiveConference(request?: protos.google.apps.meet.v2beta.IEndActiveConferenceRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.apps.meet.v2beta.IEndActiveConferenceRequest | undefined,
        {} | undefined
    ]>;
    endActiveConference(request: protos.google.apps.meet.v2beta.IEndActiveConferenceRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.apps.meet.v2beta.IEndActiveConferenceRequest | null | undefined, {} | null | undefined>): void;
    endActiveConference(request: protos.google.apps.meet.v2beta.IEndActiveConferenceRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.apps.meet.v2beta.IEndActiveConferenceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Return a fully-qualified conferenceRecord resource name string.
     *
     * @param {string} conference_record
     * @returns {string} Resource name string.
     */
    conferenceRecordPath(conferenceRecord: string): string;
    /**
     * Parse the conference_record from ConferenceRecord resource.
     *
     * @param {string} conferenceRecordName
     *   A fully-qualified path representing ConferenceRecord resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromConferenceRecordName(conferenceRecordName: string): string | number;
    /**
     * Return a fully-qualified participant resource name string.
     *
     * @param {string} conference_record
     * @param {string} participant
     * @returns {string} Resource name string.
     */
    participantPath(conferenceRecord: string, participant: string): string;
    /**
     * Parse the conference_record from Participant resource.
     *
     * @param {string} participantName
     *   A fully-qualified path representing Participant resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromParticipantName(participantName: string): string | number;
    /**
     * Parse the participant from Participant resource.
     *
     * @param {string} participantName
     *   A fully-qualified path representing Participant resource.
     * @returns {string} A string representing the participant.
     */
    matchParticipantFromParticipantName(participantName: string): string | number;
    /**
     * Return a fully-qualified participantSession resource name string.
     *
     * @param {string} conference_record
     * @param {string} participant
     * @param {string} participant_session
     * @returns {string} Resource name string.
     */
    participantSessionPath(conferenceRecord: string, participant: string, participantSession: string): string;
    /**
     * Parse the conference_record from ParticipantSession resource.
     *
     * @param {string} participantSessionName
     *   A fully-qualified path representing ParticipantSession resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromParticipantSessionName(participantSessionName: string): string | number;
    /**
     * Parse the participant from ParticipantSession resource.
     *
     * @param {string} participantSessionName
     *   A fully-qualified path representing ParticipantSession resource.
     * @returns {string} A string representing the participant.
     */
    matchParticipantFromParticipantSessionName(participantSessionName: string): string | number;
    /**
     * Parse the participant_session from ParticipantSession resource.
     *
     * @param {string} participantSessionName
     *   A fully-qualified path representing ParticipantSession resource.
     * @returns {string} A string representing the participant_session.
     */
    matchParticipantSessionFromParticipantSessionName(participantSessionName: string): string | number;
    /**
     * Return a fully-qualified recording resource name string.
     *
     * @param {string} conference_record
     * @param {string} recording
     * @returns {string} Resource name string.
     */
    recordingPath(conferenceRecord: string, recording: string): string;
    /**
     * Parse the conference_record from Recording resource.
     *
     * @param {string} recordingName
     *   A fully-qualified path representing Recording resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromRecordingName(recordingName: string): string | number;
    /**
     * Parse the recording from Recording resource.
     *
     * @param {string} recordingName
     *   A fully-qualified path representing Recording resource.
     * @returns {string} A string representing the recording.
     */
    matchRecordingFromRecordingName(recordingName: string): string | number;
    /**
     * Return a fully-qualified space resource name string.
     *
     * @param {string} space
     * @returns {string} Resource name string.
     */
    spacePath(space: string): string;
    /**
     * Parse the space from Space resource.
     *
     * @param {string} spaceName
     *   A fully-qualified path representing Space resource.
     * @returns {string} A string representing the space.
     */
    matchSpaceFromSpaceName(spaceName: string): string | number;
    /**
     * Return a fully-qualified transcript resource name string.
     *
     * @param {string} conference_record
     * @param {string} transcript
     * @returns {string} Resource name string.
     */
    transcriptPath(conferenceRecord: string, transcript: string): string;
    /**
     * Parse the conference_record from Transcript resource.
     *
     * @param {string} transcriptName
     *   A fully-qualified path representing Transcript resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromTranscriptName(transcriptName: string): string | number;
    /**
     * Parse the transcript from Transcript resource.
     *
     * @param {string} transcriptName
     *   A fully-qualified path representing Transcript resource.
     * @returns {string} A string representing the transcript.
     */
    matchTranscriptFromTranscriptName(transcriptName: string): string | number;
    /**
     * Return a fully-qualified transcriptEntry resource name string.
     *
     * @param {string} conference_record
     * @param {string} transcript
     * @param {string} entry
     * @returns {string} Resource name string.
     */
    transcriptEntryPath(conferenceRecord: string, transcript: string, entry: string): string;
    /**
     * Parse the conference_record from TranscriptEntry resource.
     *
     * @param {string} transcriptEntryName
     *   A fully-qualified path representing TranscriptEntry resource.
     * @returns {string} A string representing the conference_record.
     */
    matchConferenceRecordFromTranscriptEntryName(transcriptEntryName: string): string | number;
    /**
     * Parse the transcript from TranscriptEntry resource.
     *
     * @param {string} transcriptEntryName
     *   A fully-qualified path representing TranscriptEntry resource.
     * @returns {string} A string representing the transcript.
     */
    matchTranscriptFromTranscriptEntryName(transcriptEntryName: string): string | number;
    /**
     * Parse the entry from TranscriptEntry resource.
     *
     * @param {string} transcriptEntryName
     *   A fully-qualified path representing TranscriptEntry resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromTranscriptEntryName(transcriptEntryName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
